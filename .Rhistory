library(processmapR)
?performance()
sepsis %>% filter_trace_frequency(perc = 0.1) %>% process_map(performance(units = "semesters"))
library(processmapR)
library(bupaR)
patients %>% process_map(type = performance())
patients %>% process_map(type = performance(units = "secs"))
sepsis %>% filter_trace_frequency(perc = 0.01)
sepsis %>% filter_trace_frequency(perc = 0.03)
sepsis %>% filter_trace_frequency(perc = 0.05)
sepsis %>% filter_trace_frequency(perc = 0.15)
sepsis %>% filter_trace_frequency(perc = 0.15)  %>% process_map(performance(units = "secs"))
sepsis %>% filter_trace_frequency(perc = 0.15) %>% filter_activity("CRP", rev = T)  %>% process_map(performance(units = "secs"))
sepsis %>% filter_trace_frequency(perc = 0.15) %>% filter_activity("CRP", "Leucocytes", rev = T)  %>% process_map(performance(units = "secs"))
sepsis %>% filter_trace_frequency(perc = 0.15) %>% filter_activity(c("CRP", "Leucocytes"), rev = T)  %>% process_map(performance(units = "secs"))
sepsis %>% filter_trace_frequency(perc = 0.5) %>% filter_activity(c("CRP", "Leucocytes"), rev = T)  %>% process_map(performance(units = "secs"))
sepsis %>% filter_trace_frequency(perc = 0.25) %>% filter_activity(c("CRP", "Leucocytes"), rev = T)  %>% process_map(performance(units = "secs"))
library(processmapR)
library(bupaR)
patients
patients %>% trace_explorer()
patients %>% trace_explorer(n_traces = 2)
library(processmapR)
patients %>% trace_explorer(n_traces = 2)
patients %>% trace_explorer(n_traces = 3)
library(processmapR)
patients %>% trace_explorer(n_traces = 3)
patients %>% trace_explorer(n_traces = 1)
patients %>% trace_explorer(n_traces = 2)
patients %>% trace_explorer(n_traces = 2, type = "inf")
patients %>% trace_explorer(n_traces = 8, type = "inf")
patients %>% trace_explorer(n_traces = 156, type = "inf")
patients %>% trace_explorer(n_traces = 156, type = "inf")
library(processmapR)
patients %>% trace_explorer(n_traces = 156, type = "inf")
patients %>% trace_explorer(n_traces = 7, type = "inf")
patients %>% trace_explorer(n_traces = 2, type = "inf")
patients %>% trace_explorer(n_traces = 1, type = "inf")
patients %>% trace_explorer(n_traces = 1, type = "f")
patients %>% trace_explorer(n_traces = 16, type = "f")
patients %>% trace_explorer(n_traces = 16, coverage = 0.2, type = "inf")
?trace_explorer
library(processmapR)
library(processmapR)
library(bupaR)
patients %>% process_map()
patients %>% process_map(performance())
library(processanimateR)
patients %>% animate_process()
patients %>% process_map() %>% attrs
patients %>% process_map() %>% attrs()
patients %>% process_map() %>% attr("base_precedence")
library(processmapR)
patients %>% process_map()
patients %>% animate_process()
?processanimater
??processanimater
patients %>% mutate(time = runif())
patients %>% mutate(time = runif(1))
sepsis
sepsis %>% mutate(time = "test")
sepsis %>% mutate(time = "test") %>% process_map()
patients %>% process_map(performance())
patients %>% process_map(performance()) %>% animate_process()
animate_process(patients, proces_map(patients, performance, render = F))
animate_process(patients, process_map(patients, performance, render = F))
animate_process(patients, process_map(patients, performance(), render = F))
library(processmapR)
library(eventdataR)
library(processmapR)
positions <- data.frame(act = c("Registration","Triage and Assessment","Blood test", "MRI SCAN", "X-Ray", "Discuss Results", "Check-out", "Start", "End"),
x = c(2,4,6,7,6,9,11,0,14),
y = c(0,0,-1,0,1,0,0,0,0),
stringsAsFactors = F)
process_map(patients, fixed_node_pos = positions)
positions <- data.frame(act = c("Registration","Triage and Assessment","Blood test", "MRI SCAN", "X-Ray", "Discuss Results", "Check-out", "Start", "End"),
x = c(2,6,6,7,6,9,11,0,14),
y = c(0,0,-1,0,1,0,0,0,0),
stringsAsFactors = F)
process_map(patients, fixed_node_pos = positions)
positions <- data.frame(act = c("Registration","Triage and Assessment","Blood test", "MRI SCAN", "X-Ray", "Discuss Results", "Check-out", "Start", "End"),
x = c(2,4,6,7,6,9,11,0,14),
y = c(0,-4,-1,0,1,0,0,0,0),
stringsAsFactors = F)
process_map(patients, fixed_node_pos = positions)
library(processmapR)
performance(quantile, prob = 0.32)
performance(quantile, prob = 0.32)
performance(quantile, prob = 0.32)
library(processmapR)
source('~/UH - Local/R workspace/processmapR/R/process_map.R')
patients %>% process_map(type_nodes = performance(quantile, prob = 0.8))
library(bupaR)
patients %>% process_map(type_nodes = performance(quantile, prob = 0.8))
patients %>% process_map(type_nodes = performance(quantile, prob = 0.8))
patients %>% process_map()
patients %>% process_map()
library(processmapR)
rm(process_map)
patients %>% process_map()
patients %>% process_map(type_nodes = performance(quantile, prob = 0.8))
library(processmapR)
performance(quantile, prob = 0.8)
performance(quantile, prob = 0.8) -> t
attr(t, "arguments")
library(processmapR)
patients %>% process_map(type_nodes = performance(quantile, prob = 0.8))
patients %>% process_map(type_nodes = performance(quantile, prob = 1))
patients %>% process_map(type_nodes = performance(max))
patients %>% process_map(type_nodes = performance(quantile, prob = c(0.1,1)))
library(processmapR)
patients %>% process_map(type_nodes = performance(quantile, prob = c(1))
patients %>% process_map(type_nodes = performance(quantile, prob = c(1)))
patients %>% process_map(performance(quantile, prob = c(1)))
patients %>% process_map(performance(quantile, prob = c(0.1)))
patients %>% process_map(performance(quantile, prob = c(0.0001)))
patients %>% process_map(performance(min))
?quantile
mean
?mean
patients %>% process_map(performance(mean))
patients %>% process_map(performance(mean, trim = 0.2))
patients %>% process_map(performance(mean, trim = 0.2, units = "hours"))
patients %>% process_map(performance(mean, units = "hours", trim = 0.2))
patients %>% process_map(performance(mean, trim = 0.2, "hours"))
?probs
?quantile
patients %>% process_map(performance(mean, trim = 0.2, na.rm = T, "hours"))
patients %>% resource_dashboard()
patients %>% resource_dashboard()
library(processmapR)
library(bupaR)
patients %>% process_map(sec = performance())
library(processmapR)
patients %>% process_map(sec = performance())
library(processmapR)
patients %>% process_map(sec = performance())
library(processmapR)
patients %>% process_map(sec = performance())
library(stringr)
library(stringr)
library(stringi)
library(processmapR)
patients %>% process_map(sec = performance())
library(processmapR)
patients %>% process_map(sec = performance())
library(processmapR)
patients %>% process_map(sec = performance())
library(processmapR)
patients %>% process_map(sec = performance())
patients %>% process_map(sec = performance())
library(processmapR)
patients %>% process_map(sec = performance())
library(processmapR)
patients %>% process_map(sec = performance())
library(processmapR)
patients %>% process_map(sec = performance())
patients %>% process_map(sec = frequency())
library(processmapR)
patients %>% precedence_matrix("absolute")
patients %>% precedence_matrix("absolute") %>% plot()
patients %>% precedence_matrix("absolute") %>% class
library(processmapR)
patients %>% precedence_matrix("absolute") %>% class
library(processmapR)
patients %>% precedence_matrix("absolute") %>% plot()
patients %>% precedence_matrix("relative-case") %>% plot()
patients %>% precedence_matrix("relative-antecedent") %>% plot()
patients %>% precedence_matrix("relative-consequent") %>% plot()
patients %>% process_matrix(frequency("absolute"))
patients %>% process_matrix(frequency("absolute")) %>% plot()
patients %>% precedence_matrix("relative-case")
patients %>% process_matrix(frequency("absolute_case")) %>% plot()
patients %>% process_matrix(frequency("relative")) %>% plot()
patients %>% process_matrix(frequency("relative-case")) %>% plot()
patients %>% process_matrix(frequency("relative_case")) %>% plot()
patients %>% process_matrix(frequency("relative_case"))
library(processmapR)
patients %>% process_matrix(frequency("relative_case"))
patients %>% precedence_matrix("relative-case")
patients %>% process_matrix(frequency("relative-case"))
library(processmapR)
frequency("relative-case")
frequency("relative_case")
patients %>% process_matrix(frequency("relative-case"))
library(processmapR)
patients %>% process_matrix(frequency("relative-case"))
patients %>% process_matrix(frequency("absolute"))
patients %>% process_matrix(frequency("relative"))
patients %>% process_matrix(frequency("relative-case"))
patients %>% process_matrix(frequency("absolute-case"))
library(processmapR)
patients %>% process_matrix(frequency("relative"))
library(processmapR)
patients %>% process_matrix(frequency("relative"))
patients %>% process_matrix(frequency("relative-case"))
patients %>% process_matrix(frequency("absolte-case"))
patients %>% process_matrix(frequency("absolute-case"))
library(processmapR)
patients %>% process_map(frequency("absolute"))
patients %>% process_map(frequency("relative"))
patients %>% process_map(frequency("relative-case"))
patients %>% process_map(frequency("absolute-case"))
patients %>% process_matrix(frequency("absolute"))
patients %>% process_matrix(frequency("relative"))
patients %>% precedence_matrix(frequency("absolute"))
patients %>% precedence_matrix(frequency("relative-case"))
patients %>% precedence_matrix("relative-case")
patients %>% precedence_matrix("absolute-case")
patients %>% precedence_matrix("relative-consequent")
patients %>% precedence_matrix("relative-consequent")
patients %>% process_matrix(frequency("relative-consequent"))
patients %>% process_matrix(frequency("relative-case"))
patients %>% process_matrix(frequency("relative-case"))
library(processmapR)
patients %>% process_matrix(frequency("relative-case"))
patients %>% precedence_matrix("relative-case")
library(processmapR)
patients %>% precedence_matrix("relative-case")
patients %>% process_matrix(frequency("relative-case"))
patients %>% process_matrix(frequency("relative-case"))
library(processmapR)
patients %>% process_matrix(frequency("relative-case"))
patients %>% precedence_matrix("relative-case")
patients %>% process_matrix(frequency("relative-case")) %>% plot()
library(processmapR)
patients %>% process_matrix(frequency("absolute-case")) %>% plot()
patients %>% process_matrix(frequency("absolute-case")) %>% plot()
patients %>% process_matrix(frequency("absolute")) %>% plot()
patients %>% process_matrix(frequency("absolute"))
patients %>% process_matrix(frequency("absolute"))
patients %>% process_matrix(frequency("relative-case")) %>% plot()
patients %>% process_matrix(frequency("absolute-case")) %>% plot()
patients %>% process_matrix(frequency("relative-case")) %>% plot()
patients %>% process_matrix(frequency("relative-consequent")) %>% plot()
library(processmapR)
sepsis %>% procesS_map(frequency(value = "absolute_case"))
library(bupaR)
sepsis %>% procesS_map(frequency(value = "absolute_case"))
sepsis %>% process_map(frequency(value = "absolute_case"))
sepsis %>% filter_trace_frequency(percentage = 0.2)
sepsis %>% throughput_time(unite = "days")
frequency
library(bupaR)
patients %>% precedence_matrix()
patinets %>% process_matrix
patients %>% process_matrix
library(processmapR)
patients %>% process_matrix
patients %>% precedence_matrix()
library(processmapR)
patients %>% precedence_matrix()
patients %>% process_matrix
install.packages("microbenchmark")
library(microbenchmark)
microbenchmark(precedence_matrix(patients))
microbenchmark(precedence_matrix(patients), process_matrix(patients), times = 10)
patients %>% process_matrix
patients %>% process_matrix(type = performance())
add_start_activity(patients, "start")
library(processmapR)
microbenchmark(precedence_matrix(patients), process_matrix(patients), times = 10)
microbenchmark(precedence_matrix(patients), process_matrix(patients), times = 10)
library(processmapR)
microbenchmark(precedence_matrix(patients), process_matrix(patients), times = 10)
precedence_matrix(patients)
process_matrix(patients)
microbenchmark(precedence_matrix(patients), process_matrix(patients), times = 10)
library(processmapR)
profvis::profvis(process_matrix(patients))
library(processmapR)
profvis::profvis(process_matrix(patients))
profvis::profvis(precedence_matrix(patients))
process_matrix(sepsis)
patients %>% process_map()
patients %>% process_map(frequency("relative"))
patients %>% process_map(frequency("relative-case"))
patients %>% process_map(frequency("absolute-case"))
library(processmapR)
process_matrix(patients)
process_matrix(patients) %>% profvis::profvis()
profvis::profvis(process_matrix(patients))
profvis::profvis(process_matrix(sepsis))
profvis::profvis(precedence_matrix(sepsis))
process_matrix(frequency("absolute"))
patients %>% process_matrix(frequency("absolute"))
patients %>% process_matrix(frequency("absolute-case"))
patients %>% process_matrix(frequency("relative-case"))
patients %>% process_matrix(frequency("relative-"))
sepsis %>% process_matrix(frequency("relative-"))
sepsis %>% process_matrix(frequency("relative"))
sepsis %>% process_matrix(frequency("relative")) %>% summarize(sum(rel_n))
library(dplyr)
sepsis %>% process_matrix(frequency("relative")) %>% summarize(sum(rel_n))
patients %>% process_matrix(performance())
performance()
patients %>% process_matrix(performance())
library(processmapR)
patients %>% process_matrix(performance(units = "hours"))
library(processmapR)
patients %>% process_matrix(performance(units = "hours"))
patients %>% process_matrix(performance(units = "hours", flow_time = "inter_start_time"))
patients %>% process_matrix(performance(units = "days", flow_time = "inter_start_time"))
library(processmapR)
patients %>% process_matrix(performance(units = "days", flow_time = "inter_start_time"))
patients %>% process_matrix(performance(units = "days", flow_time = "inter_start_time"))
library(processmapR)
library(processmapR)
patients %>% process_matrix(performance(units = "days", flow_time = "inter_start_time"))
patients %>% process_matrix(performance(units = "hours", flow_time = "inter_start_time"))
patients %>% process_matrix(performance(units = "hours", flow_time = "idle_time"))
patients %>% process_matrix(performance(units = "hours", flow_time = "inter_start_time")) %>% attr
patients %>% process_matrix(performance(units = "hours", flow_time = "inter_start_time")) %>% attrs
patients %>% process_matrix(performance(units = "hours", flow_time = "inter_start_time")) %>% str
patients %>% process_matrix(performance(units = "hours", flow_time = "inter_start_time")) %>% attr(matrix_type)
patients %>% process_matrix(performance(units = "hours", flow_time = "inter_start_time")) %>% attr("matrix_type")
patients %>% process_matrix(performance(units = "hours", flow_time = "inter_start_time")) %>% attr("matrix_type") %>% class()
patients %>% process_matrix(performance(units = "hours", flow_time = "inter_start_time")) %>% attr("matrix_type") %>% attr("perspective")
library(processmapR)
patients %>% process_matrix(performance()) %>% plot
patients %>% process_matrix(performance())
library(processmapR)
patients %>% process_matrix(performance())
patients %>% process_matrix(performance()) %>% plot()
lean
mean
as.character(mean)
as.name(mean)
toString(mean)
toString(mean())
paste0(mean)
quo(mean)
quo(mean) %>% as.character()
quo_text(mean)
library(rlang)
quo_text(mean)
quo_text(mean())
quo_text(mean
quo_text(mean)
enquo(mean)
name(mean)
sym(mean)
!mean
!!mean
quo(mean)
as.character(quo(mean))
as.character(quo(median))
substitute(mean)
deparse(substitute(mean))
performance()
performance() %>% attr("units")
scale_fill_continuous_tableau()
library(ggthemes)
scale_fill_continuous_tableau()
scale_fill_continuous_tableau(palette = "Red")
library(processmapR)
patients %>% process_matrix(performance()) %>% plot()
patients %>% process_matrix(performance()) %>% plot()
library(processmapR)
paste0(mean)
paste0(!!mean)
deparse(substitute(mean))
type <- mean
deparse(substitute(type))
deparse(substitute(!!type))
deparse(substitute(!type))
substitute(type)
substitute(!type)
substitute(!!type)
quo(type)
type
quo(!!type)
as.character(quo(!!type))
as.character(quo_text(!!type))
(quo_text(!!type))
quo_text(type)
type
type %>% str
type %>% method
names(type)
quote(type)
as.character(quote(type))
as.character(quote(!!type))
as.character(!!quote(type))
type
as.formula(type)
list(deparse(substitute(type)))
deparse(substitute(type))
foo <- function(x) deparse(substitute(x))
foo(type)
foo <- function(x) list(deparse(substitute(x)))
foo(type)
getFunNames <- function(FUN){
>  if (!is.list(FUN))
>    fun.names <- paste(deparse(substitute(FUN)), collapse = " ")
>  else
>    fun.names <- unlist(lapply(substitute(FUN)[-1], function(a) paste(a)))
>  fun.names
> }
getFunNames <- function(FUN){
if (!is.list(FUN))
fun.names <- paste(deparse(substitute(FUN)), collapse = " ")
else
fun.names <- unlist(lapply(substitute(FUN)[-1], function(a) paste(a)))
fun.names
}
getFunNames(mean)
getFunNames(type)
match.call(mean)
match.call(type)
mean
paste0(type)
subsitute(type)
substitute(type)
ls(type)
parse(eval(type))
eval(type)
match.call
match.call()
match.call()[2]
match.call(type)[2]
match.call(mean)[2]
match.call(mean)[1
]
mode(type)
str(type)
library(processmapR)
patients %>% process_matrix(performance()) %>% plot()
patients %>% process_matrix(performance(units = "hours")) %>% plot()
patients %>% process_matrix(performance(FUN = max, units = "hours")) %>% plot()
precedence_matrix(patients, "relative-antecedent") %>% plot()
precedence_matrix(patients, type =  "relative-antecedent") %>% plot()
precedence_matrix(patients, type =  "relative-antecedent") %>% plot()
library(processmapR)
precedence_matrix(patients, type =  "relative-antecedent") %>% plot()
precedence_matrix(patients, type =  "relative-consequent") %>% plot()
library(processmapR)
library(processmapR)
sepsis %>% process_matrix()
library(bupaR)
sepsis %>% process_matrix()
sepsis %>% process_matrix(performance)
sepsis %>% process_matrix(performance())
sepsis %>% process_matrix(performance()) %>% plot()
sepsis %>% process_matrix(performance(units = "days")) %>% plot()
library(profvis)
profvis(process_matrix(sepsis))
library(processmapR)
sepsis %>% process_matrix(performance()) %>% plot()
library(processmapR)
sepsis %>% process_matrix(performance()) %>% plot()
sepsis %>% process_map()
sepsis %>% process_map(performance())
sepsis %>% process_map(performance(), type_nodes = frequency())
library(processmapR)
sepsis %>% process_map()
sepsis %>% process_matrix()
profvis(process_matrix(sepsis))
profvis(process_matrix(patients))
microbenchmark::microbenchmark(process_matrix(sepsis), precedence_matrix(sepsis), times = 10)
nrow(sespsi)
nrow(sepsis)
?custom
library(processmapR)
data(traffic_fines)
# make sure the amount attribute is propagated forward in each trace
# using zoo::na.locf instead of tidyr::fill since it is much faster
# still the whole pre-processing is still very slow
library(zoo)
traffic_fines_prepared <- traffic_fines %>%
filter_trace_frequency(percentage = 0.8) %>%
group_by_case() %>%
mutate(amount = na.locf(amount, na.rm = F)) %>%
ungroup_eventlog()
process_map(traffic_fines_prepared, type_nodes = custom(attribute = "amount", units = "EUR"))
library(processmapR)
data(traffic_fines)
# make sure the amount attribute is propagated forward in each trace
# using zoo::na.locf instead of tidyr::fill since it is much faster
# still the whole pre-processing is still very slow
library(zoo)
traffic_fines_prepared <- traffic_fines %>%
filter_trace_frequency(percentage = 0.8) %>%
group_by_case() %>%
mutate(amount = na.locf(amount, na.rm = F)) %>%
ungroup_eventlog()
process_map(traffic_fines_prepared, type_nodes = custom(attribute = "amount", units = "EUR"))
library(processmapR)
data(traffic_fines)
# make sure the amount attribute is propagated forward in each trace
# using zoo::na.locf instead of tidyr::fill since it is much faster
# still the whole pre-processing is still very slow
library(zoo)
traffic_fines_prepared <- traffic_fines %>%
filter_trace_frequency(percentage = 0.8) %>%
group_by_case() %>%
mutate(amount = na.locf(amount, na.rm = F)) %>%
ungroup_eventlog()
process_map(traffic_fines_prepared, type_nodes = custom(attribute = "amount", units = "EUR"))
library(processmapR)
data(traffic_fines)
# make sure the amount attribute is propagated forward in each trace
# using zoo::na.locf instead of tidyr::fill since it is much faster
# still the whole pre-processing is still very slow
library(zoo)
traffic_fines_prepared <- traffic_fines %>%
filter_trace_frequency(percentage = 0.8) %>%
group_by_case() %>%
mutate(amount = na.locf(amount, na.rm = F)) %>%
ungroup_eventlog()
process_map(traffic_fines_prepared, type_nodes = custom(attribute = "amount", units = "EUR"))
library(processmapR)
