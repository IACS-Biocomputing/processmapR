fontcolor = nodes$fontcolor,
color = nodes$color,
tooltip = nodes$tooltip,
penwidth = 1.5,
fixedsize = TRUE
fontname = "Arial") -> nodes_df
create_node_df(n = nrow(nodes),
label = nodes$label,
shape = nodes$shape,
color_level = nodes$color_level,
style = "rounded,filled",
fontcolor = nodes$fontcolor,
color = nodes$color,
tooltip = nodes$tooltip,
penwidth = 1.5,
fixedsize = TRUE,
fontname = "Arial") -> nodes_df
min_level <- min(nodes_df$color_level)
max_level <- max(nodes_df$color_level[nodes_df$color_level < Inf])
create_edge_df(from = edges$from_id,
to = edges$to_id,
label = edges$label,
penwidth = edges$penwidth,
color = ifelse(perspective_edges == "performance", "red4", "dodgerblue4"),
fontname = "Arial") -> edges_df
create_graph(nodes_df, edges_df) %>%
#add_global_graph_attrs(attr = "rankdir", value = "LR",attr_type = "graph") %>%
colorize_node_attrs(node_attr_from = "color_level",
node_attr_to = "fillcolor",
palette = ifelse(perspective_nodes == "performance", "Reds", "PuBu"),
default_color = "white",
cut_points = seq(min_level-0.1, max_level+.1, length.out = 9)) -> graph
if(render == T) {
graph %>% render_graph() %>% return()
} else
source('~/.active-rstudio-document', echo=TRUE)
create_node_df(n = nrow(nodes),
label = nodes$label,
shape = nodes$shape,
color_level = nodes$color_level,
style = "rounded,filled",
fontcolor = nodes$fontcolor,
color = nodes$color,
tooltip = nodes$tooltip,
penwidth = 1.5,
fixedsize = FALSE,
fontname = "Arial") -> nodes_df
min_level <- min(nodes_df$color_level)
max_level <- max(nodes_df$color_level[nodes_df$color_level < Inf])
create_edge_df(from = edges$from_id,
to = edges$to_id,
label = edges$label,
penwidth = edges$penwidth,
color = ifelse(perspective_edges == "performance", "red4", "dodgerblue4"),
fontname = "Arial") -> edges_df
create_graph(nodes_df, edges_df) %>%
add_global_graph_attrs(attr = "rankdir", value = "LR",attr_type = "graph") %>%
colorize_node_attrs(node_attr_from = "color_level",
node_attr_to = "fillcolor",
palette = ifelse(perspective_nodes == "performance", "Reds", "PuBu"),
default_color = "white",
cut_points = seq(min_level-0.1, max_level+.1, length.out = 9)) %>%
render_graph(layout = "tree")
create_graph(nodes_df, edges_df) %>%
#add_global_graph_attrs(attr = "rankdir", value = "LR",attr_type = "graph") %>%
colorize_node_attrs(node_attr_from = "color_level",
node_attr_to = "fillcolor",
palette = ifelse(perspective_nodes == "performance", "Reds", "PuBu"),
default_color = "white",
cut_points = seq(min_level-0.1, max_level+.1, length.out = 9)) %>%
render_graph(layout = "tree")
create_graph(nodes_df, edges_df) %>%
#add_global_graph_attrs(attr = "rankdir", value = "LR",attr_type = "graph") %>%
colorize_node_attrs(node_attr_from = "color_level",
node_attr_to = "fillcolor",
palette = ifelse(perspective_nodes == "performance", "Reds", "PuBu"),
default_color = "white",
cut_points = seq(min_level-0.1, max_level+.1, length.out = 9)) %>%
render_graph()
create_graph(nodes_df, edges_df) %>%
add_global_graph_attrs(attr = "rankdir", value = "LR",attr_type = "graph") %>%
colorize_node_attrs(node_attr_from = "color_level",
node_attr_to = "fillcolor",
palette = ifelse(perspective_nodes == "performance", "Reds", "PuBu"),
default_color = "white",
cut_points = seq(min_level-0.1, max_level+.1, length.out = 9)) %>%
render_graph()
create_graph(nodes_df, edges_df) %>%
add_global_graph_attrs(attr = "rankdir", value = "TD",attr_type = "graph") %>%
colorize_node_attrs(node_attr_from = "color_level",
node_attr_to = "fillcolor",
palette = ifelse(perspective_nodes == "performance", "Reds", "PuBu"),
default_color = "white",
cut_points = seq(min_level-0.1, max_level+.1, length.out = 9)) %>%
render_graph()
create_graph(node_df, edge_df) %>%
set_global_graph_attrs(attr= "rankdir",value="BT",attr_type = "graph") %>%
generate_dot() %>%
str_split("\n") %>%
.[[1]] -> temp
create_graph(nodes_df, edges_df) %>%
set_global_graph_attrs(attr= "rankdir",value="BT",attr_type = "graph") %>%
generate_dot() %>%
str_split("\n") %>%
.[[1]] -> temp
create_graph(nodes_df, edges_df) %>%
add_global_graph_attrs(attr= "rankdir",value="BT",attr_type = "graph") %>%
generate_dot() %>%
str_split("\n") %>%
.[[1]] -> temp
library(stringr)
create_graph(nodes_df, edges_df) %>%
add_global_graph_attrs(attr= "rankdir",value="BT",attr_type = "graph") %>%
generate_dot() %>%
str_split("\n") %>%
.[[1]] -> temp
c(temp[1], "graph [layout = dot, rankdir = LR]", temp[-1]) %>%
str_c(collapse = "\n") %>%
grViz()
c(temp[1], "graph [layout = dot, rankdir = TD]", temp[-1]) %>%
str_c(collapse = "\n") %>%
grViz()
c(temp[1], "graph [layout = dot, rankdir = BT]", temp[-1]) %>%
str_c(collapse = "\n") %>%
grViz()
create_graph(nodes_df, edges_df) %>%
add_global_graph_attrs(attr= "rankdir",value="BT",attr_type = "graph") %>%
colorize_node_attrs(node_attr_from = "color_level",
node_attr_to = "fillcolor",
palette = ifelse(perspective_nodes == "performance", "Reds", "PuBu"),
default_color = "white",
cut_points = seq(min_level-0.1, max_level+.1, length.out = 9)) %>%
generate_dot() %>%
str_split("\n") %>%
.[[1]] -> temp
c(temp[1], "graph [layout = dot, rankdir = BT]", temp[-1]) %>%
str_c(collapse = "\n") %>%
grViz()
c(temp[1], "graph [layout = dot, rankdir = LR]", temp[-1]) %>%
str_c(collapse = "\n") %>%
grViz()
c(temp[1], "graph [layout = nicely, rankdir = LR]", temp[-1]) %>%
str_c(collapse = "\n") %>%
grViz()
c(temp[1], "graph [layout = dot, rankdir = LR]", temp[-1]) %>%
str_c(collapse = "\n") %>%
grViz()
c(temp[1], "graph [layout = tree, rankdir = LR]", temp[-1]) %>%
str_c(collapse = "\n") %>%
grViz()
c(temp[1], "graph [layout = dot, rankdir = LR]", temp[-1]) %>%
str_c(collapse = "\n")
c(temp[1], "graph [layout = dot, rankdir = LR]", temp[-1]) %>%
str_c(collapse = "\n") %>% cat
create_graph(nodes_df, edges_df, graph_name = "P") %>%
add_global_graph_attrs(attr= "rankdir",value="BT",attr_type = "graph") %>%
colorize_node_attrs(node_attr_from = "color_level",
node_attr_to = "fillcolor",
palette = ifelse(perspective_nodes == "performance", "Reds", "PuBu"),
default_color = "white",
cut_points = seq(min_level-0.1, max_level+.1, length.out = 9)) %>%
generate_dot() %>%
str_split("\n") %>%
.[[1]] -> temp
c(temp[1], "graph [layout = dot, rankdir = LR]", temp[-1]) %>%
str_c(collapse = "\n") %>% cat
c(temp[1], "rankdir=LR;", temp[-1]) %>%
str_c(collapse = "\n") %>% cat
create_graph(nodes_df, edges_df, graph_name = "P") %>%
#add_global_graph_attrs(attr= "rankdir",value="BT",attr_type = "graph") %>%
colorize_node_attrs(node_attr_from = "color_level",
node_attr_to = "fillcolor",
palette = ifelse(perspective_nodes == "performance", "Reds", "PuBu"),
default_color = "white",
cut_points = seq(min_level-0.1, max_level+.1, length.out = 9)) %>%
generate_dot() %>%
str_split("\n") %>%
.[[1]] -> temp
c(temp[1], "graph [layout = dot, rankdir = LR]", temp[-1]) %>%
str_c(collapse = "\n") %>% cat
c(temp[1], "graph [layout = dot, rankdir = LR]", temp[-1]) %>%
str_c(collapse = "\n") %>%
grViz()
c(temp[1], "graph [layout = dot, rankdir = TB]", temp[-1]) %>%
str_c(collapse = "\n") %>%
grViz()
c(temp[1], "graph [layout = dot, rankdir = TB]", temp[-1]) %>%
str_c(collapse = "\n") %>% cat
c(temp[1], "graph [layout = dot, rankdir = TB]", temp[-1]) %>%
str_c(collapse = "\n") %>%
grViz()
c(temp[1], "graph [layout = dot, rankdir = TB]", temp[-1]) %>%
str_c(collapse = "\n") %>% print()
grViz("digraph {\ngraph [layout = 'dot',\n       outputorder = 'edgesfirst',\n       bgcolor = 'white']\n\nnode [fontname = 'Helvetica',\n      fontsize = '10',\n      shape = 'circle',\n      fixedsize = 'true',\n      width = '0.5',\n      style = 'filled',\n      fillcolor = 'aliceblue',\n      color = 'gray70',\n      fontcolor = 'gray50']\n\nedge [fontname = 'Helvetica',\n     fontsize = '8',\n     len = '1.5',\n     color = 'gray80',\n     arrowsize = '0.5']\n\n  '1' [label = 'Blood test\n (237)', shape = 'rectangle', style = 'rounded,filled', fontcolor = 'black', color = 'grey', tooltip = 'Blood test\n (237)', penwidth = '1.5', fixedsize = 'FALSE', fontname = 'Arial', fillcolor = '#FFF7FB'] \n  '2' [label = 'Check-out\n (492)', shape = 'rectangle', style = 'rounded,filled', fontcolor = 'white', color = 'grey', tooltip = 'Check-out\n (492)', penwidth = '1.5', fixedsize = 'FALSE', fontname = 'Arial', fillcolor = '#034E7B'] \n  '3' [label = 'Discuss Results\n (495)', shape = 'rectangle', style = 'rounded,filled', fontcolor = 'white', color = 'grey', tooltip = 'Discuss Results\n (495)', penwidth = '1.5', fixedsize = 'FALSE', fontname = 'Arial', fillcolor = '#034E7B'] \n  '4' [label = 'End', shape = 'circle', style = 'rounded,filled', fontcolor = 'brown4', color = 'brown4', tooltip = 'End\n (500)', penwidth = '1.5', fixedsize = 'FALSE', fontname = 'Arial', fillcolor = 'white'] \n  '5' [label = 'MRI SCAN\n (236)', shape = 'rectangle', style = 'rounded,filled', fontcolor = 'black', color = 'grey', tooltip = 'MRI SCAN\n (236)', penwidth = '1.5', fixedsize = 'FALSE', fontname = 'Arial', fillcolor = '#FFF7FB'] \n  '6' [label = 'Registration\n (500)', shape = 'rectangle', style = 'rounded,filled', fontcolor = 'white', color = 'grey', tooltip = 'Registration\n (500)', penwidth = '1.5', fixedsize = 'FALSE', fontname = 'Arial', fillcolor = '#034E7B'] \n  '7' [label = 'Start', shape = 'circle', style = 'rounded,filled', fontcolor = 'chartreuse4', color = 'chartreuse4', tooltip = 'Start\n (500)', penwidth = '1.5', fixedsize = 'FALSE', fontname = 'Arial', fillcolor = 'white'] \n  '8' [label = 'Triage and Assessment\n (500)', shape = 'rectangle', style = 'rounded,filled', fontcolor = 'white', color = 'grey', tooltip = 'Triage and Assessment\n (500)', penwidth = '1.5', fixedsize = 'FALSE', fontname = 'Arial', fillcolor = '#034E7B'] \n  '9' [label = 'X-Ray\n (261)', shape = 'rectangle', style = 'rounded,filled', fontcolor = 'black', color = 'grey', tooltip = 'X-Ray\n (261)', penwidth = '1.5', fixedsize = 'FALSE', fontname = 'Arial', fillcolor = '#ECE7F2'] \n'1'->'4' [label = '1', penwidth = '1', color = 'dodgerblue4', fontname = 'Arial'] \n'1'->'5' [label = '236', penwidth = '2.88376753507014', color = 'dodgerblue4', fontname = 'Arial'] \n'2'->'4' [label = '492', penwidth = '4.93587174348697', color = 'dodgerblue4', fontname = 'Arial'] \n'3'->'2' [label = '492', penwidth = '4.93587174348697', color = 'dodgerblue4', fontname = 'Arial'] \n'3'->'4' [label = '3', penwidth = '1.01603206412826', color = 'dodgerblue4', fontname = 'Arial'] \n'5'->'3' [label = '236', penwidth = '2.88376753507014', color = 'dodgerblue4', fontname = 'Arial'] \n'6'->'8' [label = '500', penwidth = '5', color = 'dodgerblue4', fontname = 'Arial'] \n'7'->'6' [label = '500', penwidth = '5', color = 'dodgerblue4', fontname = 'Arial'] \n'8'->'1' [label = '237', penwidth = '2.89178356713427', color = 'dodgerblue4', fontname = 'Arial'] \n'8'->'4' [label = '2', penwidth = '1.00801603206413', color = 'dodgerblue4', fontname = 'Arial'] \n'8'->'9' [label = '261', penwidth = '3.08416833667335', color = 'dodgerblue4', fontname = 'Arial'] \n'9'->'3' [label = '259', penwidth = '3.06813627254509', color = 'dodgerblue4', fontname = 'Arial'] \n'9'->'4' [label = '2', penwidth = '1.00801603206413', color = 'dodgerblue4', fontname = 'Arial'] \n}"
)
grViz("digraph {\ngraph [layout = 'dot',\n       outputorder = 'edgesfirst',\n       bgcolor = 'white']\n\nnode [fontname = 'Helvetica',\n      fontsize = '10',\n      shape = 'circle',\n      fixedsize = 'true',\n      width = '0.5',\n      style = 'filled',\n      fillcolor = 'aliceblue',\n      color = 'gray70',\n      fontcolor = 'gray50']\n\nedge [fontname = 'Helvetica',\n     fontsize = '8',\n     len = '1.5',\n     color = 'gray80',\n     arrowsize = '0.5']\n\n  '1' [label = 'Blood test\n (237)', shape = 'rectangle', style = 'rounded,filled', fontcolor = 'black', color = 'grey', tooltip = 'Blood test\n (237)', penwidth = '1.5', fixedsize = 'FALSE', fontname = 'Arial', fillcolor = '#FFF7FB'] \n  '2' [label = 'Check-out\n (492)', shape = 'rectangle', style = 'rounded,filled', fontcolor = 'white', color = 'grey', tooltip = 'Check-out\n (492)', penwidth = '1.5', fixedsize = 'FALSE', fontname = 'Arial', fillcolor = '#034E7B'] \n  '3' [label = 'Discuss Results\n (495)', shape = 'rectangle', style = 'rounded,filled', fontcolor = 'white', color = 'grey', tooltip = 'Discuss Results\n (495)', penwidth = '1.5', fixedsize = 'FALSE', fontname = 'Arial', fillcolor = '#034E7B'] \n  '4' [label = 'End', shape = 'circle', style = 'rounded,filled', fontcolor = 'brown4', color = 'brown4', tooltip = 'End\n (500)', penwidth = '1.5', fixedsize = 'FALSE', fontname = 'Arial', fillcolor = 'white'] \n  '5' [label = 'MRI SCAN\n (236)', shape = 'rectangle', style = 'rounded,filled', fontcolor = 'black', color = 'grey', tooltip = 'MRI SCAN\n (236)', penwidth = '1.5', fixedsize = 'FALSE', fontname = 'Arial', fillcolor = '#FFF7FB'] \n  '6' [label = 'Registration\n (500)', shape = 'rectangle', style = 'rounded,filled', fontcolor = 'white', color = 'grey', tooltip = 'Registration\n (500)', penwidth = '1.5', fixedsize = 'FALSE', fontname = 'Arial', fillcolor = '#034E7B'] \n  '7' [label = 'Start', shape = 'circle', style = 'rounded,filled', fontcolor = 'chartreuse4', color = 'chartreuse4', tooltip = 'Start\n (500)', penwidth = '1.5', fixedsize = 'FALSE', fontname = 'Arial', fillcolor = 'white'] \n  '8' [label = 'Triage and Assessment\n (500)', shape = 'rectangle', style = 'rounded,filled', fontcolor = 'white', color = 'grey', tooltip = 'Triage and Assessment\n (500)', penwidth = '1.5', fixedsize = 'FALSE', fontname = 'Arial', fillcolor = '#034E7B'] \n  '9' [label = 'X-Ray\n (261)', shape = 'rectangle', style = 'rounded,filled', fontcolor = 'black', color = 'grey', tooltip = 'X-Ray\n (261)', penwidth = '1.5', fixedsize = 'FALSE', fontname = 'Arial', fillcolor = '#ECE7F2'] \n'1'->'4' [label = '1', penwidth = '1', color = 'dodgerblue4', fontname = 'Arial'] \n'1'->'5' [label = '236', penwidth = '2.88376753507014', color = 'dodgerblue4', fontname = 'Arial'] \n'2'->'4' [label = '492', penwidth = '4.93587174348697', color = 'dodgerblue4', fontname = 'Arial'] \n'3'->'2' [label = '492', penwidth = '4.93587174348697', color = 'dodgerblue4', fontname = 'Arial'] \n'3'->'4' [label = '3', penwidth = '1.01603206412826', color = 'dodgerblue4', fontname = 'Arial'] \n'5'->'3' [label = '236', penwidth = '2.88376753507014', color = 'dodgerblue4', fontname = 'Arial'] \n'6'->'8' [label = '500', penwidth = '5', color = 'dodgerblue4', fontname = 'Arial'] \n'7'->'6' [label = '500', penwidth = '5', color = 'dodgerblue4', fontname = 'Arial'] \n'8'->'1' [label = '237', penwidth = '2.89178356713427', color = 'dodgerblue4', fontname = 'Arial'] \n'8'->'4' [label = '2', penwidth = '1.00801603206413', color = 'dodgerblue4', fontname = 'Arial'] \n'8'->'9' [label = '261', penwidth = '3.08416833667335', color = 'dodgerblue4', fontname = 'Arial'] \n'9'->'3' [label = '259', penwidth = '3.06813627254509', color = 'dodgerblue4', fontname = 'Arial'] \n'9'->'4' [label = '2', penwidth = '1.00801603206413', color = 'dodgerblue4', fontname = 'Arial'] \n}")
create_graph(nodes_df, edges_df) %>%
add_global_graph_attrs(attr = "rankdir", value = "TD",attr_type = "graph") %>%
colorize_node_attrs(node_attr_from = "color_level",
node_attr_to = "fillcolor",
palette = ifelse(perspective_nodes == "performance", "Reds", "PuBu"),
default_color = "white",
cut_points = seq(min_level-0.1, max_level+.1, length.out = 9))
create_graph(nodes_df, edges_df) %>%
add_global_graph_attrs(attr = "rankdir", value = "TD",attr_type = "graph") %>%
colorize_node_attrs(node_attr_from = "color_level",
node_attr_to = "fillcolor",
palette = ifelse(perspective_nodes == "performance", "Reds", "PuBu"),
default_color = "white",
cut_points = seq(min_level-0.1, max_level+.1, length.out = 9)) %>%
get_global_graph_attr_info()
create_graph(nodes_df, edges_df) %>%
add_global_graph_attrs(attr = "rankdir", value = "TB",attr_type = "graph") %>%
colorize_node_attrs(node_attr_from = "color_level",
node_attr_to = "fillcolor",
palette = ifelse(perspective_nodes == "performance", "Reds", "PuBu"),
default_color = "white",
cut_points = seq(min_level-0.1, max_level+.1, length.out = 9)) %>%
get_global_graph_attr_info()
create_graph(nodes_df, edges_df) %>%
add_global_graph_attrs(attr = "rankdir", value = "TB",attr_type = "graph") %>%
colorize_node_attrs(node_attr_from = "color_level",
node_attr_to = "fillcolor",
palette = ifelse(perspective_nodes == "performance", "Reds", "PuBu"),
default_color = "white",
cut_points = seq(min_level-0.1, max_level+.1, length.out = 9)) %>%
#get_global_graph_attr_info()
render_graph()
create_graph(nodes_df, edges_df) %>%
add_global_graph_attrs(attr = "rankdir", value = "TB",attr_type = "graph") %>%
colorize_node_attrs(node_attr_from = "color_level",
node_attr_to = "fillcolor",
palette = ifelse(perspective_nodes == "performance", "Reds", "PuBu"),
default_color = "white",
cut_points = seq(min_level-0.1, max_level+.1, length.out = 9)) %>%
get_global_graph_attr_info()
create_graph(nodes_df, edges_df) %>%
add_global_graph_attrs(attr = "rankdir", value = "TB",attr_type = "graph") %>%
colorize_node_attrs(node_attr_from = "color_level",
node_attr_to = "fillcolor",
palette = ifelse(perspective_nodes == "performance", "Reds", "PuBu"),
default_color = "white",
cut_points = seq(min_level-0.1, max_level+.1, length.out = 9)) %>%
render_graph(layout = "dot")
create_graph(nodes_df, edges_df) %>%
add_global_graph_attrs(attr = "rankdir", value = "TB",attr_type = "graph") %>%
colorize_node_attrs(node_attr_from = "color_level",
node_attr_to = "fillcolor",
palette = ifelse(perspective_nodes == "performance", "Reds", "PuBu"),
default_color = "white",
cut_points = seq(min_level-0.1, max_level+.1, length.out = 9)) %>%
get_global_graph_attr_info()
create_graph(nodes_df, edges_df) %>%
add_global_graph_attrs(attr = "rankdir", value = "TB",attr_type = "graph") %>%
add_global_graph_attrs(attr = "layout", value = "dot", attr_type = "graph") %>%
colorize_node_attrs(node_attr_from = "color_level",
node_attr_to = "fillcolor",
palette = ifelse(perspective_nodes == "performance", "Reds", "PuBu"),
default_color = "white",
cut_points = seq(min_level-0.1, max_level+.1, length.out = 9)) %>%
get_global_graph_attr_info()
create_graph(nodes_df, edges_df) %>%
add_global_graph_attrs(attr = "rankdir", value = "TB",attr_type = "graph") %>%
add_global_graph_attrs(attr = "layout", value = "dot", attr_type = "graph") %>%
colorize_node_attrs(node_attr_from = "color_level",
node_attr_to = "fillcolor",
palette = ifelse(perspective_nodes == "performance", "Reds", "PuBu"),
default_color = "white",
cut_points = seq(min_level-0.1, max_level+.1, length.out = 9)) %>%
#get_global_graph_attr_info()
render_graph(layout = "dot")
library(processmapR)
process_map(patients)
process_map(patients, type_edges = performance())
generate_dot
process_map(patients, type_edges = performance(), render = F)
process_map(patients, render = F)
process_map(patients, type_edges = performance(), render = F) %>% get_edge_df()
process_map(patients, render = F) %>% get_edge_df()
process_map(patients, type_edges = performance(), render = F) %>% get_node_df()
process_map(patients, render = F) %>% get_node_df()
process_map(patients, render = F) %>% get_global_graph_attr_info()
process_map(patients, type_edges = performance(), render = F) %>% get_global_graph_attr_info()
process_map(patients, type_edges = performance(), render = F) %>% render_graph()
traceback
traceback()
process_map(patients, type = performance(), render = F) %>% render_graph()
process_map(patients, type_nodes = performance(), render = F) %>% render_graph()
library(processmapR)
process_map(patients, type = performance(), render = F) %>% render_graph()
library(processmapR)
process_map(patients, type = performance(), render = F) %>% render_graph()
library(processmapR)
process_map(patients, type = performance(), render = F) %>% render_graph()
process_map(patients, type = performance(), render = F)
process_map(patients, type = frequency(), render = F)
process_map(patients, type = frequency(), render = F) %>% get_edge_attrs()
process_map(patients, type = frequency(), render = F) %>% get_edge_info()
process_map(patients, type = performance(), render = F) %>% get_edge_info
process_map(patients, type = performance(), render = F) %>% get_edge_df()
process_map(patients, type = frequency(), render = F) %>% get_edge_df(graph = )
library(processmapR)
process_map(patients, type = frequency(), render = F) %>% get_edge_df(graph = )
process_map(patients, type = performance(), render = F) %>% render_graph()
traceback()
process_map(patients, type = performance(), render = F) %>% get_edge_attrs()
process_map(patients, type = performance(), render = F) %>% get_edge_attrs_ws()
process_map(patients, type = performance(), render = F) %>% get_edge_df()
process_map(patients, type = frequency(), render = F) %>% get_edge_df()
process_map(patients, type = performance(), render = F) %>% get_edge_df()
library(processmapR)
process_map(patients, type = performance(), render = F) %>% render_graph()
library(processmapR)
process_map(patients, type = performance(), render = F) %>% render_graph()
process_map(patients, type_edges = performance())
process_map(patients, type_edges = performance(max))
process_map(sepsis, type_edges = performance(max))
library(processmapR)
library(bupaR)
patients %>% process_map()
patients %>% filter_precedence(antecedents = "Registration", consequents = "Blood test") %>% process_map()
patients %>% filter_precedence(antecedents = "Registration", consequents = "Blood test")
?filter_precedence
patients %>% filter_precedence(antecedents = "Registration", consequents = "Blood test", precedence_type = "eventually_follows")
patients %>% filter_precedence(antecedents = "Registration", consequents = "Blood test", precedence_type = "eventually_follows")  %>% process_map()
patients %>% filter_precedence(antecedents = "Triage and Assessment", consequents = "Blood test")  %>% process_map()
patients %>% filter_precedence(antecedents = "Triage and Assessment", consequents = "Blood test", filter_method = "none")  %>% process_map()
patients %>% filter_throughput_time(interval = c(50, NA))
patients %>% filter_throughput_time(interval = c(5, NA))
?rescale
library(scales)
?rescale
range(3:4)
range(3:80)
library(processmapR)
library(bupaR)
patients
patients %>% processing_time(level = "activity")
patients %>% processing_time(level = "activity") %>% attr("raw")
library(processmapR)
patients %>% process_map()
library(bupaR)
patients %>% process_map()
sepsis %>% process_map()
library(eventdataR)
library(processmapR)
data(traffic_fines)
# make sure the amount attribute is propagated forward in each trace
#  using zoo::na.locf instead of tidyr::fill since it is much faster
# still the whole pre-processing is still very slow
library(zoo)
traffic_fines_prepared <- traffic_fines %>% filter_trace_frequency(percentage = 0.8) %>% group_by_case() %>% mutate(amount = na.locf(amount, na.rm = F)) %>% ungroup_eventlog()
process_map(traffic_fines_prepared, type_nodes = custom(attribute = "amount", units = "EUR"))
RColorBrewer::brewer.pal()
RColorBrewer::brewer.pal.info
library(processmapR)
process_map(traffic_fines_prepared, type_nodes = custom(attribute = "amount", units = "EUR"))
process_map(traffic_fines_prepared, type_nodes = custom(attribute = "amount", units = "EUR", color_scale = "Reds"))
library(processmapR)
process_map(traffic_fines_prepared, type_nodes = custom(attribute = "amount", units = "EUR", color_scale = "Reds"))
process_map(traffic_fines_prepared, type_nodes = custom(attribute = "amount", units = "EUR", color_scale = "Greens"))
process_map(traffic_fines_prepared, type_nodes = custom(attribute = "amount", units = "EUR", color_scale = "YlOrRd"))
library(processmapR)
process_map(traffic_fines_prepared, type = processmapR::frequency(color_scale = "YlOrRd"))
process_map(traffic_fines_prepared, type_nodes = custom(attribute = "amount", units = "EUR"))
library(processmapR)
?custom
library(processmapR)
process_map(patients)
library(eventdataR)
process_map(patients)
process_map(patients) %>% attr("base_precedence")
library(bupaR)
process_map(patients) %>% attr("base_precedence")
process_map(patients) %>% attr("base_precedence")
library(processmapR)
process_map(patients)
process_map(patients, fixed_edge_width = T)
library(processmapR)
process_map(patients, fixed_edge_width = T)
process_map(patients, fixed_edge_width = T, type_edges = frequency(value = "relative"))
library(processmapR)
library(processmapR)
sepsis
library(bupaR)
sepsis
sepsis %>% sample_n(100)
library(processmapR)
patients %>% trace_explorer()
library(bupaR)
patients %>% trace_explorer()
patients %>% trace_explorer(.abbreviate = F)
patients %>% trace_explorer(.abbreviate = F)
library(processmapR)
patients %>% trace_explorer(.abbreviate = F)
library(processmapR)
patients %>% trace_explorer(.abbreviate = F)
library(processmapR)
library(processmapR)
library(processmapR)
library(processmapR)
library(processmapR)
library(bupaR)
patients %>% precedence_matrix("absolute")
patients %>% precedence_matrix("absolute") %>% plot()
patients %>% precedence_matrix("relative_case")
library(processmapR)
patients %>% precedence_matrix("relative_case")
patients %>% precedence_matrix("relative_case") %>% plot
library(processmapR)
patients %>% precedence_matrix("relative_case") %>% plot
patients %>% precedence_matrix("relative_case")
patients %>% precedence_matrix("relative_case") %>% plot()
patients %>% precedence_matrix("relative_case") %>% str
library(processmapR)
patients %>% precedence_matrix("relative_case") %>% plot()
patients %>% precedence_matrix("relative_case") %>%
patients %>% precedence_matrix("relative_case")
patients %>% precedence_matrix("relative_case") %>% str
patients %>% precedence_matrix("relative_case") %>% ggplot(aes(antecedent, consequent))
library(ggplot2)
patients %>% precedence_matrix("relative_case") %>% ggplot(aes(antecedent, consequent))
patients %>% precedence_matrix("relative_case") %>% ggplot(aes(antecedent, consequent)) + geom_tile()
patients %>% precedence_matrix("relative_case") %>% ggplot(aes(antecedent, consequent)) + geom_tile() + geom_text(aes(label = round(rel_n_cases*100, 2)))
patients %>% precedence_matrix("relative_case") %>% ggplot(aes(antecedent, consequent)) + geom_tile(aes(fill = rel_n_cases)) + geom_text(aes(label = round(rel_n_cases*100, 2)))
library(processmapR)
patients %>% precedence_matrix("relative_case") %>% plot()
patients %>% process_map()
2/500
261/500
patients %>% process_map(type = frequency("relative_case"))
library(processmapR)
usethis::use_pkgdown()
pkgdown::build_site()
pkgdown::build_site()
usethis::use_pkgdown()
pkgdown::build_site()
pkgdown::build_site()
library(processmapR)
library(processmapR)
library(bupaR)
patients %>% trace_explorer(cov = 1)
patients %>% trace_explorer(cov = 1, show_labels = F)
patients %>% trace_explorer(cov = 1, show_labels = F) -> p
ggplotly(p)
ggplot2::ggplotly(p)
plotly::ggplotly(p)
patients %>% process_map(type = performance(mean, "weeks")
patients %>% process_map(type = performance(mean, "weeks"))
patients %>% process_map(type = performance(function(x) mean(x)*26, "weeks"))
patients %>% process_map(type = performance(function(x, na.rm) mean(x, na.rm)*26, "weeks"))
patients %>% process_map(type = performance(function(x, na.rm) mean(x, na.rm = na.rm)*26, "weeks"))
patients %>% process_map(type = performance(function(x, na.rm) mean(x, na.rm = na.rm)/26, "weeks"))
patients %>% process_map(type = performance(~mean, "weeks"))
patients %>% process_map(type = performance(mean, "weeks"))
patients %>% process_map(type = performance(~mean, "weeks"))
patients %>% process_map(type = performance(mean*26, "weeks"))
patients %>% process_map(type = performance(min(mean), "weeks"))
mean_semesters <- function(vaue_weeks, na.rm) {mean(weeks, na.rm = na.rm)/26}
patients %>% process_map(type = performance(mean_semesters, "weeks"))
mean_semesters <- function(value_weeks, na.rm) {mean(value_weeks, na.rm = na.rm)/26}
patients %>% process_map(type = performance(mean_semesters, "weeks"))
patients %>% process_map(type = performance(mean_semesters, " "))
patients %>% process_map(type = performance(mean_semesters, ""))
patients %>% process_map(type = performance(mean_semesters, "weeks"))
patients %>% process_map(type = attr(performance(mean_semesters, "weeks"), units = ""))
as.double.difftime()
?as.double.difftime()
?as.double.difftime(today() - now())
as.double.difftime(today() - now())
library(lubridate)
as.double(today() - now())
as.double(today() - today() + 1)
as.double(today() - today() + 1, units = "days")
as.double(today() - today() + 1, units = "years")
as.double(today() - today() + 1, units = "year")
52*7
library(processmapR)
library(bupaR)
patients %>% process_map(performance())
trace_back()
patients %>% process_map(performance())
traceback()
library(processmapR)
patients %>% process_map()
patients %>% process_map(performance())
patients %>% process_map(performance(units = "months"))
patients %>% process_map(performance(units = "months"))
library(processmapR)
patients %>% process_map(performance(units = "years"))
patients %>% process_map(performance(units = "semesters"))
13*7
3*30
library(processmapR)
?performance()
library(processmapR)
?performance()
sepsis %>% filter_trace_frequency(perc = 0.1) %>% process_map(performance(units = "semesters"))
library(processmapR)
library(bupaR)
patients %>% process_map(type = performance())
patients %>% process_map(type = performance(units = "secs"))
sepsis %>% filter_trace_frequency(perc = 0.01)
sepsis %>% filter_trace_frequency(perc = 0.03)
sepsis %>% filter_trace_frequency(perc = 0.05)
sepsis %>% filter_trace_frequency(perc = 0.15)
sepsis %>% filter_trace_frequency(perc = 0.15)  %>% process_map(performance(units = "secs"))
sepsis %>% filter_trace_frequency(perc = 0.15) %>% filter_activity("CRP", rev = T)  %>% process_map(performance(units = "secs"))
sepsis %>% filter_trace_frequency(perc = 0.15) %>% filter_activity("CRP", "Leucocytes", rev = T)  %>% process_map(performance(units = "secs"))
sepsis %>% filter_trace_frequency(perc = 0.15) %>% filter_activity(c("CRP", "Leucocytes"), rev = T)  %>% process_map(performance(units = "secs"))
sepsis %>% filter_trace_frequency(perc = 0.5) %>% filter_activity(c("CRP", "Leucocytes"), rev = T)  %>% process_map(performance(units = "secs"))
sepsis %>% filter_trace_frequency(perc = 0.25) %>% filter_activity(c("CRP", "Leucocytes"), rev = T)  %>% process_map(performance(units = "secs"))
