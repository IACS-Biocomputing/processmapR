#get_global_graph_attr_info()
render_graph()
create_graph(nodes_df, edges_df) %>%
add_global_graph_attrs(attr = "rankdir", value = "TB",attr_type = "graph") %>%
colorize_node_attrs(node_attr_from = "color_level",
node_attr_to = "fillcolor",
palette = ifelse(perspective_nodes == "performance", "Reds", "PuBu"),
default_color = "white",
cut_points = seq(min_level-0.1, max_level+.1, length.out = 9)) %>%
get_global_graph_attr_info()
create_graph(nodes_df, edges_df) %>%
add_global_graph_attrs(attr = "rankdir", value = "TB",attr_type = "graph") %>%
colorize_node_attrs(node_attr_from = "color_level",
node_attr_to = "fillcolor",
palette = ifelse(perspective_nodes == "performance", "Reds", "PuBu"),
default_color = "white",
cut_points = seq(min_level-0.1, max_level+.1, length.out = 9)) %>%
render_graph(layout = "dot")
create_graph(nodes_df, edges_df) %>%
add_global_graph_attrs(attr = "rankdir", value = "TB",attr_type = "graph") %>%
colorize_node_attrs(node_attr_from = "color_level",
node_attr_to = "fillcolor",
palette = ifelse(perspective_nodes == "performance", "Reds", "PuBu"),
default_color = "white",
cut_points = seq(min_level-0.1, max_level+.1, length.out = 9)) %>%
get_global_graph_attr_info()
create_graph(nodes_df, edges_df) %>%
add_global_graph_attrs(attr = "rankdir", value = "TB",attr_type = "graph") %>%
add_global_graph_attrs(attr = "layout", value = "dot", attr_type = "graph") %>%
colorize_node_attrs(node_attr_from = "color_level",
node_attr_to = "fillcolor",
palette = ifelse(perspective_nodes == "performance", "Reds", "PuBu"),
default_color = "white",
cut_points = seq(min_level-0.1, max_level+.1, length.out = 9)) %>%
get_global_graph_attr_info()
create_graph(nodes_df, edges_df) %>%
add_global_graph_attrs(attr = "rankdir", value = "TB",attr_type = "graph") %>%
add_global_graph_attrs(attr = "layout", value = "dot", attr_type = "graph") %>%
colorize_node_attrs(node_attr_from = "color_level",
node_attr_to = "fillcolor",
palette = ifelse(perspective_nodes == "performance", "Reds", "PuBu"),
default_color = "white",
cut_points = seq(min_level-0.1, max_level+.1, length.out = 9)) %>%
#get_global_graph_attr_info()
render_graph(layout = "dot")
library(processmapR)
process_map(patients)
process_map(patients, type_edges = performance())
generate_dot
process_map(patients, type_edges = performance(), render = F)
process_map(patients, render = F)
process_map(patients, type_edges = performance(), render = F) %>% get_edge_df()
process_map(patients, render = F) %>% get_edge_df()
process_map(patients, type_edges = performance(), render = F) %>% get_node_df()
process_map(patients, render = F) %>% get_node_df()
process_map(patients, render = F) %>% get_global_graph_attr_info()
process_map(patients, type_edges = performance(), render = F) %>% get_global_graph_attr_info()
process_map(patients, type_edges = performance(), render = F) %>% render_graph()
traceback
traceback()
process_map(patients, type = performance(), render = F) %>% render_graph()
process_map(patients, type_nodes = performance(), render = F) %>% render_graph()
library(processmapR)
process_map(patients, type = performance(), render = F) %>% render_graph()
library(processmapR)
process_map(patients, type = performance(), render = F) %>% render_graph()
library(processmapR)
process_map(patients, type = performance(), render = F) %>% render_graph()
process_map(patients, type = performance(), render = F)
process_map(patients, type = frequency(), render = F)
process_map(patients, type = frequency(), render = F) %>% get_edge_attrs()
process_map(patients, type = frequency(), render = F) %>% get_edge_info()
process_map(patients, type = performance(), render = F) %>% get_edge_info
process_map(patients, type = performance(), render = F) %>% get_edge_df()
process_map(patients, type = frequency(), render = F) %>% get_edge_df(graph = )
library(processmapR)
process_map(patients, type = frequency(), render = F) %>% get_edge_df(graph = )
process_map(patients, type = performance(), render = F) %>% render_graph()
traceback()
process_map(patients, type = performance(), render = F) %>% get_edge_attrs()
process_map(patients, type = performance(), render = F) %>% get_edge_attrs_ws()
process_map(patients, type = performance(), render = F) %>% get_edge_df()
process_map(patients, type = frequency(), render = F) %>% get_edge_df()
process_map(patients, type = performance(), render = F) %>% get_edge_df()
library(processmapR)
process_map(patients, type = performance(), render = F) %>% render_graph()
library(processmapR)
process_map(patients, type = performance(), render = F) %>% render_graph()
process_map(patients, type_edges = performance())
process_map(patients, type_edges = performance(max))
process_map(sepsis, type_edges = performance(max))
library(processmapR)
library(bupaR)
patients %>% process_map()
patients %>% filter_precedence(antecedents = "Registration", consequents = "Blood test") %>% process_map()
patients %>% filter_precedence(antecedents = "Registration", consequents = "Blood test")
?filter_precedence
patients %>% filter_precedence(antecedents = "Registration", consequents = "Blood test", precedence_type = "eventually_follows")
patients %>% filter_precedence(antecedents = "Registration", consequents = "Blood test", precedence_type = "eventually_follows")  %>% process_map()
patients %>% filter_precedence(antecedents = "Triage and Assessment", consequents = "Blood test")  %>% process_map()
patients %>% filter_precedence(antecedents = "Triage and Assessment", consequents = "Blood test", filter_method = "none")  %>% process_map()
patients %>% filter_throughput_time(interval = c(50, NA))
patients %>% filter_throughput_time(interval = c(5, NA))
?rescale
library(scales)
?rescale
range(3:4)
range(3:80)
library(processmapR)
library(bupaR)
patients
patients %>% processing_time(level = "activity")
patients %>% processing_time(level = "activity") %>% attr("raw")
library(processmapR)
patients %>% process_map()
library(bupaR)
patients %>% process_map()
sepsis %>% process_map()
library(eventdataR)
library(processmapR)
data(traffic_fines)
# make sure the amount attribute is propagated forward in each trace
#  using zoo::na.locf instead of tidyr::fill since it is much faster
# still the whole pre-processing is still very slow
library(zoo)
traffic_fines_prepared <- traffic_fines %>% filter_trace_frequency(percentage = 0.8) %>% group_by_case() %>% mutate(amount = na.locf(amount, na.rm = F)) %>% ungroup_eventlog()
process_map(traffic_fines_prepared, type_nodes = custom(attribute = "amount", units = "EUR"))
RColorBrewer::brewer.pal()
RColorBrewer::brewer.pal.info
library(processmapR)
process_map(traffic_fines_prepared, type_nodes = custom(attribute = "amount", units = "EUR"))
process_map(traffic_fines_prepared, type_nodes = custom(attribute = "amount", units = "EUR", color_scale = "Reds"))
library(processmapR)
process_map(traffic_fines_prepared, type_nodes = custom(attribute = "amount", units = "EUR", color_scale = "Reds"))
process_map(traffic_fines_prepared, type_nodes = custom(attribute = "amount", units = "EUR", color_scale = "Greens"))
process_map(traffic_fines_prepared, type_nodes = custom(attribute = "amount", units = "EUR", color_scale = "YlOrRd"))
library(processmapR)
process_map(traffic_fines_prepared, type = processmapR::frequency(color_scale = "YlOrRd"))
process_map(traffic_fines_prepared, type_nodes = custom(attribute = "amount", units = "EUR"))
library(processmapR)
?custom
library(processmapR)
process_map(patients)
library(eventdataR)
process_map(patients)
process_map(patients) %>% attr("base_precedence")
library(bupaR)
process_map(patients) %>% attr("base_precedence")
process_map(patients) %>% attr("base_precedence")
library(processmapR)
process_map(patients)
process_map(patients, fixed_edge_width = T)
library(processmapR)
process_map(patients, fixed_edge_width = T)
process_map(patients, fixed_edge_width = T, type_edges = frequency(value = "relative"))
library(processmapR)
library(processmapR)
sepsis
library(bupaR)
sepsis
sepsis %>% sample_n(100)
library(processmapR)
patients %>% trace_explorer()
library(bupaR)
patients %>% trace_explorer()
patients %>% trace_explorer(.abbreviate = F)
patients %>% trace_explorer(.abbreviate = F)
library(processmapR)
patients %>% trace_explorer(.abbreviate = F)
library(processmapR)
patients %>% trace_explorer(.abbreviate = F)
library(processmapR)
library(processmapR)
library(processmapR)
library(processmapR)
library(processmapR)
library(bupaR)
patients %>% precedence_matrix("absolute")
patients %>% precedence_matrix("absolute") %>% plot()
patients %>% precedence_matrix("relative_case")
library(processmapR)
patients %>% precedence_matrix("relative_case")
patients %>% precedence_matrix("relative_case") %>% plot
library(processmapR)
patients %>% precedence_matrix("relative_case") %>% plot
patients %>% precedence_matrix("relative_case")
patients %>% precedence_matrix("relative_case") %>% plot()
patients %>% precedence_matrix("relative_case") %>% str
library(processmapR)
patients %>% precedence_matrix("relative_case") %>% plot()
patients %>% precedence_matrix("relative_case") %>%
patients %>% precedence_matrix("relative_case")
patients %>% precedence_matrix("relative_case") %>% str
patients %>% precedence_matrix("relative_case") %>% ggplot(aes(antecedent, consequent))
library(ggplot2)
patients %>% precedence_matrix("relative_case") %>% ggplot(aes(antecedent, consequent))
patients %>% precedence_matrix("relative_case") %>% ggplot(aes(antecedent, consequent)) + geom_tile()
patients %>% precedence_matrix("relative_case") %>% ggplot(aes(antecedent, consequent)) + geom_tile() + geom_text(aes(label = round(rel_n_cases*100, 2)))
patients %>% precedence_matrix("relative_case") %>% ggplot(aes(antecedent, consequent)) + geom_tile(aes(fill = rel_n_cases)) + geom_text(aes(label = round(rel_n_cases*100, 2)))
library(processmapR)
patients %>% precedence_matrix("relative_case") %>% plot()
patients %>% process_map()
2/500
261/500
patients %>% process_map(type = frequency("relative_case"))
library(processmapR)
usethis::use_pkgdown()
pkgdown::build_site()
pkgdown::build_site()
usethis::use_pkgdown()
pkgdown::build_site()
pkgdown::build_site()
library(processmapR)
library(processmapR)
library(bupaR)
patients %>% trace_explorer(cov = 1)
patients %>% trace_explorer(cov = 1, show_labels = F)
patients %>% trace_explorer(cov = 1, show_labels = F) -> p
ggplotly(p)
ggplot2::ggplotly(p)
plotly::ggplotly(p)
patients %>% process_map(type = performance(mean, "weeks")
patients %>% process_map(type = performance(mean, "weeks"))
patients %>% process_map(type = performance(function(x) mean(x)*26, "weeks"))
patients %>% process_map(type = performance(function(x, na.rm) mean(x, na.rm)*26, "weeks"))
patients %>% process_map(type = performance(function(x, na.rm) mean(x, na.rm = na.rm)*26, "weeks"))
patients %>% process_map(type = performance(function(x, na.rm) mean(x, na.rm = na.rm)/26, "weeks"))
patients %>% process_map(type = performance(~mean, "weeks"))
patients %>% process_map(type = performance(mean, "weeks"))
patients %>% process_map(type = performance(~mean, "weeks"))
patients %>% process_map(type = performance(mean*26, "weeks"))
patients %>% process_map(type = performance(min(mean), "weeks"))
mean_semesters <- function(vaue_weeks, na.rm) {mean(weeks, na.rm = na.rm)/26}
patients %>% process_map(type = performance(mean_semesters, "weeks"))
mean_semesters <- function(value_weeks, na.rm) {mean(value_weeks, na.rm = na.rm)/26}
patients %>% process_map(type = performance(mean_semesters, "weeks"))
patients %>% process_map(type = performance(mean_semesters, " "))
patients %>% process_map(type = performance(mean_semesters, ""))
patients %>% process_map(type = performance(mean_semesters, "weeks"))
patients %>% process_map(type = attr(performance(mean_semesters, "weeks"), units = ""))
as.double.difftime()
?as.double.difftime()
?as.double.difftime(today() - now())
as.double.difftime(today() - now())
library(lubridate)
as.double(today() - now())
as.double(today() - today() + 1)
as.double(today() - today() + 1, units = "days")
as.double(today() - today() + 1, units = "years")
as.double(today() - today() + 1, units = "year")
52*7
library(processmapR)
library(bupaR)
patients %>% process_map(performance())
trace_back()
patients %>% process_map(performance())
traceback()
library(processmapR)
patients %>% process_map()
patients %>% process_map(performance())
patients %>% process_map(performance(units = "months"))
patients %>% process_map(performance(units = "months"))
library(processmapR)
patients %>% process_map(performance(units = "years"))
patients %>% process_map(performance(units = "semesters"))
13*7
3*30
library(processmapR)
?performance()
library(processmapR)
?performance()
sepsis %>% filter_trace_frequency(perc = 0.1) %>% process_map(performance(units = "semesters"))
library(processmapR)
library(bupaR)
patients %>% process_map(type = performance())
patients %>% process_map(type = performance(units = "secs"))
sepsis %>% filter_trace_frequency(perc = 0.01)
sepsis %>% filter_trace_frequency(perc = 0.03)
sepsis %>% filter_trace_frequency(perc = 0.05)
sepsis %>% filter_trace_frequency(perc = 0.15)
sepsis %>% filter_trace_frequency(perc = 0.15)  %>% process_map(performance(units = "secs"))
sepsis %>% filter_trace_frequency(perc = 0.15) %>% filter_activity("CRP", rev = T)  %>% process_map(performance(units = "secs"))
sepsis %>% filter_trace_frequency(perc = 0.15) %>% filter_activity("CRP", "Leucocytes", rev = T)  %>% process_map(performance(units = "secs"))
sepsis %>% filter_trace_frequency(perc = 0.15) %>% filter_activity(c("CRP", "Leucocytes"), rev = T)  %>% process_map(performance(units = "secs"))
sepsis %>% filter_trace_frequency(perc = 0.5) %>% filter_activity(c("CRP", "Leucocytes"), rev = T)  %>% process_map(performance(units = "secs"))
sepsis %>% filter_trace_frequency(perc = 0.25) %>% filter_activity(c("CRP", "Leucocytes"), rev = T)  %>% process_map(performance(units = "secs"))
library(processmapR)
library(bupaR)
patients
patients %>% trace_explorer()
patients %>% trace_explorer(n_traces = 2)
library(processmapR)
patients %>% trace_explorer(n_traces = 2)
patients %>% trace_explorer(n_traces = 3)
library(processmapR)
patients %>% trace_explorer(n_traces = 3)
patients %>% trace_explorer(n_traces = 1)
patients %>% trace_explorer(n_traces = 2)
patients %>% trace_explorer(n_traces = 2, type = "inf")
patients %>% trace_explorer(n_traces = 8, type = "inf")
patients %>% trace_explorer(n_traces = 156, type = "inf")
patients %>% trace_explorer(n_traces = 156, type = "inf")
library(processmapR)
patients %>% trace_explorer(n_traces = 156, type = "inf")
patients %>% trace_explorer(n_traces = 7, type = "inf")
patients %>% trace_explorer(n_traces = 2, type = "inf")
patients %>% trace_explorer(n_traces = 1, type = "inf")
patients %>% trace_explorer(n_traces = 1, type = "f")
patients %>% trace_explorer(n_traces = 16, type = "f")
patients %>% trace_explorer(n_traces = 16, coverage = 0.2, type = "inf")
?trace_explorer
library(processmapR)
library(processmapR)
library(bupaR)
patients %>% process_map()
patients %>% process_map(performance())
library(processanimateR)
patients %>% animate_process()
patients %>% process_map() %>% attrs
patients %>% process_map() %>% attrs()
patients %>% process_map() %>% attr("base_precedence")
library(processmapR)
patients %>% process_map()
patients %>% animate_process()
?processanimater
??processanimater
patients %>% mutate(time = runif())
patients %>% mutate(time = runif(1))
sepsis
sepsis %>% mutate(time = "test")
sepsis %>% mutate(time = "test") %>% process_map()
patients %>% process_map(performance())
patients %>% process_map(performance()) %>% animate_process()
animate_process(patients, proces_map(patients, performance, render = F))
animate_process(patients, process_map(patients, performance, render = F))
animate_process(patients, process_map(patients, performance(), render = F))
library(processmapR)
library(eventdataR)
library(processmapR)
positions <- data.frame(act = c("Registration","Triage and Assessment","Blood test", "MRI SCAN", "X-Ray", "Discuss Results", "Check-out", "Start", "End"),
x = c(2,4,6,7,6,9,11,0,14),
y = c(0,0,-1,0,1,0,0,0,0),
stringsAsFactors = F)
process_map(patients, fixed_node_pos = positions)
positions <- data.frame(act = c("Registration","Triage and Assessment","Blood test", "MRI SCAN", "X-Ray", "Discuss Results", "Check-out", "Start", "End"),
x = c(2,6,6,7,6,9,11,0,14),
y = c(0,0,-1,0,1,0,0,0,0),
stringsAsFactors = F)
process_map(patients, fixed_node_pos = positions)
positions <- data.frame(act = c("Registration","Triage and Assessment","Blood test", "MRI SCAN", "X-Ray", "Discuss Results", "Check-out", "Start", "End"),
x = c(2,4,6,7,6,9,11,0,14),
y = c(0,-4,-1,0,1,0,0,0,0),
stringsAsFactors = F)
process_map(patients, fixed_node_pos = positions)
library(processmapR)
performance(quantile, prob = 0.32)
performance(quantile, prob = 0.32)
performance(quantile, prob = 0.32)
library(processmapR)
source('~/UH - Local/R workspace/processmapR/R/process_map.R')
patients %>% process_map(type_nodes = performance(quantile, prob = 0.8))
library(bupaR)
patients %>% process_map(type_nodes = performance(quantile, prob = 0.8))
patients %>% process_map(type_nodes = performance(quantile, prob = 0.8))
patients %>% process_map()
patients %>% process_map()
library(processmapR)
rm(process_map)
patients %>% process_map()
patients %>% process_map(type_nodes = performance(quantile, prob = 0.8))
library(processmapR)
performance(quantile, prob = 0.8)
performance(quantile, prob = 0.8) -> t
attr(t, "arguments")
library(processmapR)
patients %>% process_map(type_nodes = performance(quantile, prob = 0.8))
patients %>% process_map(type_nodes = performance(quantile, prob = 1))
patients %>% process_map(type_nodes = performance(max))
patients %>% process_map(type_nodes = performance(quantile, prob = c(0.1,1)))
library(processmapR)
patients %>% process_map(type_nodes = performance(quantile, prob = c(1))
patients %>% process_map(type_nodes = performance(quantile, prob = c(1)))
patients %>% process_map(performance(quantile, prob = c(1)))
patients %>% process_map(performance(quantile, prob = c(0.1)))
patients %>% process_map(performance(quantile, prob = c(0.0001)))
patients %>% process_map(performance(min))
?quantile
mean
?mean
patients %>% process_map(performance(mean))
patients %>% process_map(performance(mean, trim = 0.2))
patients %>% process_map(performance(mean, trim = 0.2, units = "hours"))
patients %>% process_map(performance(mean, units = "hours", trim = 0.2))
patients %>% process_map(performance(mean, trim = 0.2, "hours"))
?probs
?quantile
patients %>% process_map(performance(mean, trim = 0.2, na.rm = T, "hours"))
patients %>% resource_dashboard()
patients %>% resource_dashboard()
library(processmapR)
library(bupaR)
patients %>% process_map(sec = performance())
library(processmapR)
patients %>% process_map(sec = performance())
library(processmapR)
patients %>% process_map(sec = performance())
library(processmapR)
patients %>% process_map(sec = performance())
library(stringr)
library(stringr)
library(stringi)
library(processmapR)
patients %>% process_map(sec = performance())
library(processmapR)
patients %>% process_map(sec = performance())
library(processmapR)
patients %>% process_map(sec = performance())
library(processmapR)
patients %>% process_map(sec = performance())
patients %>% process_map(sec = performance())
library(processmapR)
patients %>% process_map(sec = performance())
library(processmapR)
patients %>% process_map(sec = performance())
library(processmapR)
patients %>% process_map(sec = performance())
patients %>% process_map(sec = frequency())
library(processmapR)
patients %>% precedence_matrix("absolute")
patients %>% precedence_matrix("absolute") %>% plot()
patients %>% precedence_matrix("absolute") %>% class
library(processmapR)
patients %>% precedence_matrix("absolute") %>% class
library(processmapR)
patients %>% precedence_matrix("absolute") %>% plot()
patients %>% precedence_matrix("relative-case") %>% plot()
patients %>% precedence_matrix("relative-antecedent") %>% plot()
patients %>% precedence_matrix("relative-consequent") %>% plot()
patients %>% process_matrix(frequency("absolute"))
patients %>% process_matrix(frequency("absolute")) %>% plot()
patients %>% precedence_matrix("relative-case")
patients %>% process_matrix(frequency("absolute_case")) %>% plot()
patients %>% process_matrix(frequency("relative")) %>% plot()
patients %>% process_matrix(frequency("relative-case")) %>% plot()
patients %>% process_matrix(frequency("relative_case")) %>% plot()
patients %>% process_matrix(frequency("relative_case"))
library(processmapR)
patients %>% process_matrix(frequency("relative_case"))
patients %>% precedence_matrix("relative-case")
patients %>% process_matrix(frequency("relative-case"))
library(processmapR)
frequency("relative-case")
frequency("relative_case")
patients %>% process_matrix(frequency("relative-case"))
library(processmapR)
patients %>% process_matrix(frequency("relative-case"))
patients %>% process_matrix(frequency("absolute"))
patients %>% process_matrix(frequency("relative"))
patients %>% process_matrix(frequency("relative-case"))
patients %>% process_matrix(frequency("absolute-case"))
library(processmapR)
patients %>% process_matrix(frequency("relative"))
library(processmapR)
patients %>% process_matrix(frequency("relative"))
patients %>% process_matrix(frequency("relative-case"))
patients %>% process_matrix(frequency("absolte-case"))
patients %>% process_matrix(frequency("absolute-case"))
library(processmapR)
patients %>% process_map(frequency("absolute"))
patients %>% process_map(frequency("relative"))
patients %>% process_map(frequency("relative-case"))
patients %>% process_map(frequency("absolute-case"))
patients %>% process_matrix(frequency("absolute"))
patients %>% process_matrix(frequency("relative"))
patients %>% precedence_matrix(frequency("absolute"))
patients %>% precedence_matrix(frequency("relative-case"))
patients %>% precedence_matrix("relative-case")
patients %>% precedence_matrix("absolute-case")
patients %>% precedence_matrix("relative-consequent")
patients %>% precedence_matrix("relative-consequent")
patients %>% process_matrix(frequency("relative-consequent"))
patients %>% process_matrix(frequency("relative-case"))
patients %>% process_matrix(frequency("relative-case"))
library(processmapR)
patients %>% process_matrix(frequency("relative-case"))
patients %>% precedence_matrix("relative-case")
library(processmapR)
patients %>% precedence_matrix("relative-case")
patients %>% process_matrix(frequency("relative-case"))
patients %>% process_matrix(frequency("relative-case"))
library(processmapR)
patients %>% process_matrix(frequency("relative-case"))
patients %>% precedence_matrix("relative-case")
patients %>% process_matrix(frequency("relative-case")) %>% plot()
library(processmapR)
patients %>% process_matrix(frequency("absolute-case")) %>% plot()
patients %>% process_matrix(frequency("absolute-case")) %>% plot()
patients %>% process_matrix(frequency("absolute")) %>% plot()
patients %>% process_matrix(frequency("absolute"))
patients %>% process_matrix(frequency("absolute"))
patients %>% process_matrix(frequency("relative-case")) %>% plot()
patients %>% process_matrix(frequency("absolute-case")) %>% plot()
patients %>% process_matrix(frequency("relative-case")) %>% plot()
patients %>% process_matrix(frequency("relative-consequent")) %>% plot()
library(processmapR)
sepsis %>% procesS_map(frequency(value = "absolute_case"))
library(bupaR)
sepsis %>% procesS_map(frequency(value = "absolute_case"))
sepsis %>% process_map(frequency(value = "absolute_case"))
sepsis %>% filter_trace_frequency(percentage = 0.2)
sepsis %>% throughput_time(unite = "days")
frequency
